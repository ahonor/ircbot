#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: ircbot:connect: "connect to the channel"
#/ usage: rerun ircbot:connect  --channel <> [ --server <irc.freenode.net>] [ --nick <ircbot>] [ --log <irclog>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh connect || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: ircbot:connect. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: CHANNEL SERVER NICK LOG

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

RAWLOG=/tmp/irclog.raw.txt

config=$(mktemp ${TMP:-/tmp}/irclog:connect.XXXXX)
 
config="${config}_${CHANNEL}"
 
echo "NICK $NICK" > $config
echo "USER $NICK +i \* :$0" >> $config
echo "JOIN #$CHANNEL" >> $config
 
trap "rm -f $config;exit 0" INT TERM EXIT


#cat $RAWLOG | while read LINE
tail -f $config | 
nc $SERVER 6667 | 
tee -a $RAWLOG  | 
while read LINE
do
    set -- $LINE

    
    
    if [[ $# = 3 ]]
    then
        [[ "$1" =~ ^:(.*)\!~(.*) ]] && user=${BASH_REMATCH[1]} || user=unknown
        type=$2
        channel=$3
        shift; shift; shift;
    else
        type=$1
        shift ;
    fi

    mesg=$@
    case "$type" in
        PING) echo "PONG${LINE#PING}" >> $config;;
        NOTICE) ;;
        QUIT) ;;
        PART) ;;
        JOIN) ;;
        NICK) ;;
        PRIVMSG) 
            printf "[%s] %s\n" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" "$LINE" 
            ;;
        *) continue; #ignore other kinds of messages.
    esac

done
# Done. Exit with last command exit status.
exit $?

