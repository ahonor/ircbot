#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: ircbot:digest: "digest the log"
#/ usage: rerun ircbot:digest [ --format <ghpost>] [ --server <irc.freenode.net>]  --channel <> [ --dir <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh digest || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: ircbot:digest. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: FORMAT SERVER CHANNEL DIR

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

write_output() {
    cat <<EOF
$@
EOF
}

exists_header() {
    if [[ -n "$LOG"  && -f $LOG ]]
    then   return 1
    fi
    return 0
}

print_header() {
    server=$1 channel=$2 date=$3
    ghpost() {
        cat <<EOF
---
layout: irclog
server: $server
channel: $channel
category: [irclog]
date: $date
---

EOF

    }

    ghpost $server $channel $date
}


escape_msg() {
    echo $* |
    sed -e 's,\[,\\[,g' -e 's,\],\\],g'    
}

print_msg() {
    time=$1 nick=$2 
    shift; shift; 
    markdown() {
        printf -- "#### %s %s\n %s\n" "$time" "$nick" "$(escape_msg $*)"
    }

    markdown $*
}

[[ ! -d "$DIR" ]] && mkdir -p "$DIR"

# Messages look like this:
# [2013-03-17T18:31:31Z] :Alex-SF!~Alex-SF@hsd1.ca.comcast.net PRIVMSG #bot_123 :hello world

# Read from standard input.

while read LINE
do
    set -- $LINE
    [ $# -lt 4 ] && {
        echo >&2 "WARN: $# < 4: skipping: $LINE"
        continue
    }
    time=unknown date=unknown
    [[ "$1" =~ ^\[([0-9-]+)T(.*)Z\] ]] && { date=${BASH_REMATCH[1]};  time=${BASH_REMATCH[2]}; } 
    [[ "$2" =~ ^:(.*)\!~(.*)        ]] && user=${BASH_REMATCH[1]} || user=unknown
    type=$3
    channel=$4
    shift; shift; shift; shift;
    message=$@

    case $FORMAT in
        ghpost) 
            LOG=${DIR}/$date-$CHANNEL.md
            [[ ! -f $LOG ]] && print_header $SERVER $CHANNEL $date > $LOG
            print_msg $time $user $* >> $LOG
            ;; 
    esac

done

# Done. Exit with last command exit status.
exit $?

